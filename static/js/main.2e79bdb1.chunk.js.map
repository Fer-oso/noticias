{"version":3,"sources":["components/Header.js","components/Constants.js","components/Noticia.js","components/Noticias.js","components/Buscador.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","API","URL","Noticia","this","props","noticia","description","title","url","urlToImage","src","alt","href","target","Component","Noticias","noticias","map","key","Buscador","state","llamarAPI","pais","categoria","console","log","axios","get","then","res","setState","data","articles","paisRef","React","createRef","categoriaRef","busqueda","e","preventDefault","current","value","onSubmit","ref","type","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wNAUeA,EATA,WACX,OACI,gCACI,wBAAIC,UAAU,mCAAd,cCJEC,EAAK,2CACLC,EAAK,wC,iBCiBJC,E,iLAhBF,IAAD,EACuCC,KAAKC,MAAMC,QAA/CC,EADH,EACGA,YAAYC,EADf,EACeA,MAAMC,EADrB,EACqBA,IAAIC,EADzB,EACyBA,WAC7B,OACG,yBAAKV,UAAU,gCACV,yBAAKW,IAAKD,EAAYV,UAAU,eAAeY,IAAKJ,IACpD,yBAAKR,UAAU,oBACX,wBAAIA,UAAU,cAAcQ,GAC5B,uBAAGR,UAAU,aAAaO,GAC1B,uBAAGM,KAAMJ,EAAKT,UAAU,kBAAkBc,OAAO,UAAjD,2B,GATEC,aCiBPC,E,iLAdP,OACK,yBAAKhB,UAAU,YACZI,KAAKC,MAAMY,SAASC,KAAI,SAAAZ,GAAO,OAC7B,kBAAC,EAAD,CACEa,IAAOb,EAAQG,IACfH,QAASA,Y,GAPNS,aCuERK,E,2MAlEXC,MAAM,CACFJ,SAAS,I,EAGbK,UAAY,WAAkC,IAAjCC,EAAgC,4DAAtBC,EAAsB,iEACzCC,QAAQC,IAAIH,EAAKC,GACjBG,IAAMC,IAAI1B,EAAI,WAAD,OAAYqB,GAAf,oBAAmCC,GAAnC,eAA8DvB,GACvE4B,MAAK,SAAAC,GACFL,QAAQC,IAAII,GACb,EAAKC,SAAS,CACVd,SAASa,EAAIE,KAAKC,e,EAS7BC,QAAQC,IAAMC,Y,EACdC,aAAaF,IAAMC,Y,EACnBE,SAAW,SAACC,GACRA,EAAEC,iBACF,IAAMF,EAAW,CACbf,KAAK,EAAKW,QAAQO,QAAQC,MAC1BlB,UAAU,EAAKa,aAAaI,QAAQC,OAElCnB,EAAOe,EAASf,KAChBC,EAAWc,EAASd,UAC1BC,QAAQC,IAAIH,EAAKC,GAGnB,EAAKF,UAAUC,EAAKC,I,mFAhBlBpB,KAAKkB,c,+BAoBL,OACI,yBAAKtB,UAAU,aACX,0BAAMA,UAAU,6BAA6B2C,SAAUvC,KAAKkC,UAC5D,4BAAQtC,UAAU,gBAAgB4C,IAAKxC,KAAK8B,SAC5C,iDACA,4BAAQQ,MAAM,MAAd,aACA,4BAAQA,MAAM,MAAd,WAEA,4BAAQ1C,UAAU,gBAAgB4C,IAAKxC,KAAKiC,cAC5C,uDACA,4BAAQK,MAAM,WAAd,WACA,4BAAQA,MAAM,UAAd,YACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,iBAAd,mBACA,4BAAQA,MAAM,WAAd,WACA,4BAAQA,MAAM,cAAd,eAEA,4BAAQG,KAAK,SAAS7C,UAAU,qCAAhC,WAGJ,6BACC,kBAAC,EAAD,CACAiB,SAAUb,KAAKiB,MAAMJ,iB,GA5DXF,aCUR+B,E,iLAVX,OACE,yBAAK9C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GALUe,aCSEgC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.2e79bdb1.chunk.js","sourcesContent":["import React from 'react';\r\nconst Header = () =>{\r\n    return(\r\n        <header>      \r\n            <h1 className=\"text-center jumbotron container\">\r\n               Noticias\r\n           </h1> \r\n        </header>\r\n    )\r\n}\r\nexport default Header;","export const  API ='&apiKey=c3e6ec0f5f774a0c8470e6828e638a77';\r\nexport const  URL ='https://newsapi.org/v2/top-headlines?';\r\n\r\nexport const call = URL+API;\r\n\r\n/*\r\nPARAMETROS\r\nTop headlines /v2/top-headlines - returns breaking news headlines for a country and category, or currently running on a single or multiple sources. This is perfect for use with news tickers or anywhere you want to display live up-to-date news headlines and images.\r\n\r\nEverything /v2/everything - we index every recent news and blog article published by over 30,000 different sources large and small, and you can search through them with this endpoint. This endpoint is better suited for news analysis and article discovery, but can be used to retrieve articles for display too.\r\n\r\nWe also have a minor endpoint that can be used to retrieve a small subset of the publishers we index from:\r\n\r\nSources /v2/sources - returns information (including name, description, and category) about the most notable sources we index. This list could be piped directly through to your users when showing them some of the options available.\r\n\r\nRequest parameters\r\ncountry\r\nThe 2-letter ISO 3166-1 code of the country you want to get headlines for. Possible options: ae ar at au be bg br ca ch cn co cu cz de eg fr gb gr hk hu id ie il in it jp kr lt lv ma mx my ng nl no nz ph pl pt ro rs ru sa se sg si sk th tr tw ua us ve za . Note: you can't mix this param with the sources param.\r\n\r\ncategory\r\nThe category you want to get headlines for. Possible options: business entertainment general health science sports technology . Note: you can't mix this param with the sources param.\r\n\r\nsources\r\nA comma-seperated string of identifiers for the news sources or blogs you want headlines from. Use the /sources endpoint to locate these programmatically or look at the sources index. Note: you can't mix this param with the country or category params.\r\n\r\nq\r\nKeywords or a phrase to search for.\r\n\r\npageSize\r\nint\r\nThe number of results to return per page (request). 20 is the default, 100 is the maximum.\r\n\r\npage\r\nint\r\nUse this to page through the results if the total results found is greater than the page size.\r\n\r\napiKey\r\nREQUIRED\r\nYour API key. Alternatively you can provide this via the X-Api-Key HTTP header.\r\n*/ ","import React,{Component} from 'react';\r\nclass Noticia extends Component{\r\n    render(){\r\n        const {description,title,url,urlToImage} = this.props.noticia\r\n        return(\r\n           <div className=\"card container col-md-4 mt-2\" >\r\n                <img src={urlToImage} className=\"card-img-top\" alt={title}/>\r\n                <div className=\"card-body m-auto\">\r\n                    <h5 className=\"card-title\">{title}</h5>\r\n                    <p className=\"card-text\">{description}</p>\r\n                    <a href={url} className=\"btn btn-primary\" target=\"_blank\">Ver nota completa</a>\r\n\r\n                </div>\r\n           </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Noticia;","import React ,{Component} from 'react';\r\nimport Noticia from './Noticia';\r\nclass Noticias extends Component{\r\n    render(){\r\n        return(\r\n             <div className=\"row mt-3\">\r\n               {this.props.noticias.map(noticia=>(\r\n                  <Noticia\r\n                    key = {noticia.url}\r\n                    noticia={noticia}\r\n                  />\r\n               ))}\r\n            </div >\r\n        )\r\n\r\n    }\r\n}\r\n\r\nexport default Noticias;","import React,{Component} from 'react';\r\nimport {API,URL} from './Constants';\r\nimport axios from 'axios';\r\n\r\nimport Noticias from './Noticias';\r\nclass Buscador extends Component{ \r\n    \r\n    state={\r\n        noticias:[]\r\n    }\r\n/*LLAMADO A LA API*/ \r\n    llamarAPI = (pais=`ar`,categoria=`general`)=>{\r\n        console.log(pais,categoria)\r\n        axios.get(URL+`country=${pais}`+`&category=${categoria}`+`&pageSize=21`+API)\r\n        .then(res=>{\r\n            console.log(res)\r\n           this.setState({\r\n               noticias:res.data.articles\r\n           })\r\n        })\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.llamarAPI();\r\n    }\r\n/*REFS Y FORMCONTROL*/\r\n    paisRef=React.createRef();\r\n    categoriaRef=React.createRef();\r\n    busqueda = (e) =>{\r\n        e.preventDefault();\r\n        const busqueda = {\r\n            pais:this.paisRef.current.value,\r\n            categoria:this.categoriaRef.current.value\r\n        }\r\n        const pais = busqueda.pais;\r\n        const categoria= busqueda.categoria;\r\n        console.log(pais,categoria)\r\n\r\n        \r\n      this.llamarAPI(pais,categoria);\r\n    }\r\n  \r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <form className=\"form-group col-md-2 m-auto\" onSubmit={this.busqueda}>\r\n                <select className=\"custom-select\" ref={this.paisRef}>\r\n                <option>Elije un pais</option>\r\n                <option value=\"ar\">Argentina</option>\r\n                <option value=\"br\">Brazil</option>\r\n                </select>\r\n                <select className=\"custom-select\" ref={this.categoriaRef}>\r\n                <option>Elije una categoria</option>\r\n                <option value=\"general\">General</option>\r\n                <option value=\"sports\">Deportes</option>\r\n                <option value=\"business\">Negocios</option>\r\n                <option value=\"entertainment\">Entretenimiento</option>\r\n                <option value=\"science\">Ciencia</option>\r\n                <option value=\"technology\">Tecnologia</option>\r\n                </select>\r\n                <button type=\"submit\" className=\"btn btn-secondary disabled m-auto\">Enviar</button>    \r\n           </form>\r\n           \r\n            <div>\r\n             <Noticias\r\n             noticias={this.state.noticias}/>\r\n             </div>\r\n             \r\n             </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Buscador;","import React,{Component} from 'react';\nimport Header from './components/Header';\nimport Buscador from './components/Buscador';\nclass App extends Component {\n  render(){\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Buscador/>\n      </div>\n    );\n  }\n \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}